#!/usr/bin/python
# -*- coding: utf-8 -*-

import argparse
import sys
from bucket3 import b3tools
from bucket3.fsmeta import fsmeta
import time
	
	
def main(*argv):
	parser = argparse.ArgumentParser(prog='bucket3')
	
	parser.add_argument("-p", "--path",
		dest="path",
		default = '.',
		help="Provide the top directory of your bucket3 blog.")
		
	subparsers = parser.add_subparsers(help='sub-command help', dest='cmd')
	
	# NEW
	parser_new = subparsers.add_parser('new', help='Scaffold new post file.')
	parser_new.add_argument("slug")
	parser_new.add_argument("--ext", default='md', help='Extension of the file to be created. Usually defaults to md.')
	
	# INIT
	parser_init = subparsers.add_parser('init', help='Initialize a new blog')
	
	# CLEAR
	parser_clear = subparsers.add_parser('clear', help='Delete HTML and cache files.')
	
	# RENDER
	parser_2html = subparsers.add_parser('render', help='Render HTML pages.')
	parser_2html.add_argument("-f", '--force', 
				action='store_true', dest='force', default=False,
				help='Force script to re-generate HTML even if no new or modified posts are found.')
	
	args = parser.parse_args()
	
	if args.cmd == 'new':
		# Create NEW post file
		b3tools.post_new(slug=args.slug, ext=args.ext, cpath=args.path)
		return
		
	elif args.cmd == 'init':
		# INITialize blog directories and configuration files
		b3tools.blog_new(args.path)
		return
		
	elif args.cmd == 'clear':
		# CLEAR data files and HTML.
		b3tools.blog_clean(args.path)
		
	elif args.cmd == 'render':
		from bucket3 import Bucket3v2 as Bucket3
		conf = b3tools.conf_get(args.path)

		fsdb = fsmeta( conf['root_dir'] )
		fsdb.create()

		t1 = int(time.time())
		t2 = int(fsdb.meta_get('last_obj_ts', 0))

		fsdb.fs_sync( 'posts' ) 

		b = Bucket3(conf = conf)
		b.db_init()

		for f in fsdb.file_get_new( since_ts=t2 ):
		    print "[new]", f['id'], f['path'], "mtime=", f['mtime'], "lstime=", f['lstime'], "last_obj_ts=", t2
		    post = b.fs_post_get(f['path'])
		    if post:
		        b.db_post_put(post)
		for f in fsdb.file_get_deleted( before_ts=t1 ):
		    print "[del]", f['id'], f['path'], "mtime=", f['mtime'], "lstime=", f['lstime'], "last_obj_ts=", t1
		    post_id = b.fs_post_get_id(f['path'])
		    b.db_post_del(post_id)
		fsdb.close()

		# Render static pages, CSS files, etc. 
		# Should be able to decide smarter if this is necessary each time
		b.render_html_skel() 

		b.rq_do()


		return 0

	else: 
		parser.print_help()

if __name__ == '__main__':
	main()
